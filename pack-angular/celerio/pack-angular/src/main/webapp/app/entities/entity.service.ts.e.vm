$output.webapp("app/entities/${entity.model.var}/${entity.model.var}.service.ts")##
import { Injectable } from '@angular/core';
import { HttpModule, Http, Response, Headers, RequestOptions } from '@angular/http';
import { LazyLoadEvent } from 'primeng/primeng';
import { Observable } from 'rxjs/Observable';
import { MessageService } from '../../service/message.service';
import { PageResponse, PageRequestByExample } from '../../support/paging';
import { ${entity.model.type} } from './${entity.model.var}';

@Injectable()
export class ${entity.service.type} {

    private options = new RequestOptions({ headers: new Headers({ 'Content-Type': 'application/json' }) });

    constructor(private http: Http, private messageService : MessageService) {}

    /**
     * Get a $entity.model.type by id.
     */
    ${entity.model.getter}(id : any) : Observable<$entity.model.type> {
        return this.http.get('api/${entity.model.vars}/' + id)
            .map(response => <${entity.model.type}> response.json())
            .catch(this.handleError);
    }

    /**
     * Update the passed ${entity.model.var}.
     */
    update($entity.model.var : $entity.model.type) : Observable<$entity.model.type> {
        let body = JSON.stringify($entity.model.var);

        return this.http.put('api/$entity.model.vars/', body, this.options)
            .map(response => <$entity.model.type> response.json())
            .catch(this.handleError);
    }

    /**
     * Load a page (for paginated datatable) of $entity.model.type using the passed
     * $entity.model.var as an example for the search by example facility.
     */
    getPage($entity.model.var : $entity.model.type, event : LazyLoadEvent) : Observable<PageResponse<$entity.model.type>> {
        let req = new PageRequestByExample($entity.model.var, event);
        let body = JSON.stringify(req);

        return this.http.post('api/$entity.model.vars/page', body, this.options)
            .map(response => {
                let pr = <PageResponse<$entity.model.type>> response.json();
                return new PageResponse<$entity.model.type>(pr.totalPages, pr.totalElements, pr.content);
            })
            .catch(this.handleError);
    }

    /**
     * Performs a search by example on 1 attribute (defined on server side) and returns at most 10 results.
     * Used by ${entity.model.type}CompleteComponent.
     */
    complete(query : string) : Observable<${entity.model.type}[]> {
        let body = JSON.stringify({'query': query, 'maxResults': 10});
        return this.http.post('api/$entity.model.vars/complete', body, this.options)
            .map(response => <${entity.model.type}[]> response.json())
            .catch(this.handleError);
    }

    /**
     * Delete an $entity.model.type by id.
     */
    delete(id : any) {
        return this.http.delete('api/${entity.model.vars}/' + id).catch(this.handleError);
    }

    // sample method from angular doc
    private handleError (error: any) {
        // TODO: seems we cannot use messageService from here...
        let errMsg = (error.message) ? error.message :
        error.status ? `Status: ${d}{error.status} - Text: ${d}{error.statusText}` : 'Server error';
        console.error(errMsg); // log to console instead
        return Observable.throw(errMsg);
    }
}
