//
// Source code generated by Celerio, a Jaxio product.
// Documentation: http://www.jaxio.com/documentation/celerio/
// Follow us on twitter: @jaxiosoft
// Need commercial support ? Contact us: info@jaxio.com
// Template pack-angular:src/main/webapp/app/entities/entity-list.component.ts.e.vm
//
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { Router } from '@angular/router';
import { LazyLoadEvent } from 'primeng/primeng';
import { PageResponse } from "../../support/paging";
import { MessageService } from '../../service/message.service';
import { Author } from './author';
import { AuthorDetailComponent } from './author-detail.component';
import { AuthorService } from './author.service';

import { AuthorLineComponent } from '../author/author-line.component';

@Component({
    moduleId: module.id,
	templateUrl: 'author-list.component.html',
	selector: 'author-list',
})
export class AuthorListComponent {

    @Input() header = "All Authors...";

    // when sub is true, it means this list is a one-to-many list.
    // It belongs to a parent entity, as a result the addNew operation
    // must prefill the parent entity. The prefill is not done here, instead we
    // emit an event.
    @Input() sub : boolean;
    @Output() onAddNewClicked = new EventEmitter();

    authorToDelete : Author;
    displayDeleteDialog : boolean;

    private example : Author = null; // used to query by example...

    // list is paginated
    currentPage : PageResponse<Author> = new PageResponse<Author>(0,0,[]);

    // Many to one: input param is used to filter the list when displayed
    // as a one-to-many list by the other side.
    private _favoriteAuthor : Author;

    constructor(private router:Router, private authorService : AuthorService, private messageService : MessageService) { }

    loadPage(event : LazyLoadEvent) {
        this.authorService.getPage(this.example, event).
            subscribe(
                pageResponse => this.currentPage = pageResponse,
                error => this.messageService.error('Could not get the results', error)
            );
    }

    // Many to one: input param is used to filter the list when displayed
    // as a one-to-many list by the other side.
    @Input()
    set favoriteAuthor(favoriteAuthor : Author) {
        if (favoriteAuthor == null) {
            return;
        }
        this._favoriteAuthor = favoriteAuthor;

        this.example = new Author();
        this.example.favoriteAuthor = new Author();
        this.example.favoriteAuthor.id = this._favoriteAuthor.id;
    }


    onRowSelect(event : any) {
        this.router.navigate(['/author', event.data.id]);
    }

    addNew() {
        if (this.sub) {
            this.onAddNewClicked.emit("addNew");
        } else {
            this.router.navigate(['/author', 'new']);
        }
    }

    showDeleteDialog(rowData : any) {
        this.authorToDelete = <Author> rowData;
        this.displayDeleteDialog = true;
    }

    // delete + remove from current page
    delete() {
        this.authorService.delete(this.authorToDelete.id).
            subscribe(
                response => {
                    this.currentPage.remove(this.authorToDelete);
                    this.displayDeleteDialog = false;
                    this.authorToDelete = null;
                    this.messageService.info('Deleted OK', 'PrimeNG Rocks ;-)');
                },
                error => this.messageService.error('Could not delete!', error)
            );
    }
}